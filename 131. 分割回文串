给你一个字符串 s，请你将 s 分割成一些子串，使每个子串都是 
回文串
 。返回 s 所有可能的分割方案。

 

示例 1：

输入：s = "aab"
输出：[["a","a","b"],["aa","b"]]
示例 2：

输入：s = "a"
输出：[["a"]]
 

提示：

1 <= s.length <= 16
s 仅由小写英文字母组成


*********************************************************************************************************************************************************************




切割问题，有不同的切割方式
判断回文


from typing import List

class Solution:

    def partition(self, s: str) -> List[List[str]]:
        '''
        递归用于纵向遍历
        for循环用于横向遍历
        当切割线迭代至字符串末尾，说明找到一种方法
        类似组合问题，为了不重复切割同一位置，需要start_index来做标记下一轮递归的起始位置(切割线)
        '''
        result = []
        self.backtracking(s, 0, [], result)
        return result

    def backtracking(self, s: str, start_index: int, path: List[str], result: List[List[str]]):
        # 基准情况：如果起始索引等于字符串长度，说明找到了一个有效的分割方案
        if start_index == len(s):
            result.append(path[:])  # 将当前路径添加到结果中
            return
        
        # 单层递归逻辑
        for i in range(start_index, len(s)):
            # 判断被截取的这一段子串([start_index, i])是否为回文串
            if self.is_palindrome(s, start_index, i):
                path.append(s[start_index:i+1])  # 添加子串到路径中
                self.backtracking(s, i + 1, path, result)  # 递归处理剩余部分
                path.pop()  # 回溯，移除最后一个子串

    def is_palindrome(self, s: str, start: int, end: int) -> bool:
        # 使用双指针法判断子串是否为回文
        while start < end:
            if s[start] != s[end]:
                return False  # 如果两端字符不相等，则不是回文
            start += 1
            end -= 1
        return True  # 如果所有字符都相等，则是回文














