给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。

给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。



 

示例 1：

输入：digits = "23"
输出：["ad","ae","af","bd","be","bf","cd","ce","cf"]
示例 2：

输入：digits = ""
输出：[]
示例 3：

输入：digits = "2"
输出：["a","b","c"]
 

提示：

0 <= digits.length <= 4
digits[i] 是范围 ['2', '9'] 的一个数字。







****************************************************************************************************************************************************************************



class Solution:
    def __init__(self):
        # 映射数字到对应的字母集合
        self.letterMap = [
            "",     # 0 - 无对应字母
            "",     # 1 - 无对应字母
            "abc",  # 2 - 对应 "abc"
            "def",  # 3 - 对应 "def"
            "ghi",  # 4 - 对应 "ghi"
            "jkl",  # 5 - 对应 "jkl"
            "mno",  # 6 - 对应 "mno"
            "pqrs", # 7 - 对应 "pqrs"
            "tuv",  # 8 - 对应 "tuv"
            "wxyz"  # 9 - 对应 "wxyz"
        ]
    
    def backtracking(self, digits, index, path, result):
        """
        回溯算法生成所有可能的字母组合
        :param digits: 输入的数字字符串
        :param index: 当前处理的数字索引
        :param path: 当前构建的字母路径
        :param result: 存储所有组合结果的列表
        """
        # 如果索引等于数字字符串的长度，说明一个完整的组合已经生成
        if index == len(digits):
            result.append(path)  # 将生成的组合加入结果列表
            return
        
        # 获取当前数字对应的字符集
        digit = int(digits[index])
        letters = self.letterMap[digit]
        
        # 遍历字符集中的每个字符
        for letter in letters:
            # 递归调用，处理下一个数字，路径加上当前字符
            self.backtracking(digits, index + 1, path + letter, result)
    
    def letterCombinations(self, digits):
        """
        主方法，生成所有可能的字母组合
        :param digits: 输入的数字字符串
        :return: 包含所有字母组合的列表
        """
        # 如果输入为空，返回空列表
        if not digits:
            return []
        
        result = []  # 初始化结果列表
        self.backtracking(digits, 0, "", result)  # 开始回溯算法
        return result  # 返回结果列表




















