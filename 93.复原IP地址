有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。

例如："0.1.2.201" 和 "192.168.1.1" 是 有效 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效 IP 地址。
给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 '.' 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。

 

示例 1：

输入：s = "25525511135"
输出：["255.255.11.135","255.255.111.35"]
示例 2：

输入：s = "0000"
输出：["0.0.0.0"]
示例 3：

输入：s = "101023"
输出：["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]


**********************************************************************************************************************************************************************************




from typing import List

class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        result = []
        # 开始回溯，初始参数为字符串s，起始索引0，当前点数量0，当前IP地址为空字符串，结果列表result
        self.backtracking(s, 0, 0, "", result)
        return result

    def backtracking(self, s: str, start_index: int, point_num: int, current: str, result: List[str]) -> None:
        # 如果已经有三个点，表示前三段已经完成，现在需要检查最后一段
        if point_num == 3:
            # 检查最后一段是否合法，如果合法则加入结果列表
            if self.is_valid(s, start_index, len(s) - 1):
                result.append(current + s[start_index:])
            return

        # 遍历从当前起始位置开始到最多三个字符的范围，尝试分割子字符串
        for i in range(start_index, min(start_index + 3, len(s))):
            # 检查当前子字符串是否合法
            if self.is_valid(s, start_index, i):
                sub = s[start_index:i + 1]
                # 递归处理剩余的字符串部分，当前IP地址增加当前子字符串和一个点
                self.backtracking(s, i + 1, point_num + 1, current + sub + '.', result)
            else:
                # 如果当前子字符串不合法，则后续更长的子字符串也不可能合法，直接退出循环
                break

    def is_valid(self, s: str, start: int, end: int) -> bool:
        # 起始索引大于结束索引则不合法
        if start > end:
            return False
        # 前导零且长度大于1的数字不合法
        if s[start] == '0' and start != end:
            return False
        # 转换子字符串为整数并检查是否在0到255之间
        num = int(s[start:end + 1])
        return 0 <= num <= 255
