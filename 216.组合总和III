找出所有相加之和为 n 的 k 个数的组合，且满足下列条件：

只使用数字1到9
每个数字 最多使用一次 
返回 所有可能的有效组合的列表 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。

 

示例 1:

输入: k = 3, n = 7
输出: [[1,2,4]]
解释:
1 + 2 + 4 = 7
没有其他符合的组合了。
示例 2:

输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]
解释:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
没有其他符合的组合了。
示例 3:

输入: k = 4, n = 1
输出: []
解释: 不存在有效的组合。
在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 > 1，没有有效的组合。
 

提示:

2 <= k <= 9
1 <= n <= 60








***********************************************************************************************************************************************************************************

一维数组path来存放符合条件的结果，二维数组result来存放结果集。先写逻辑，需要啥参数了，填什么参数。



剪枝操作：如果 currentSum 超过 targetSum，立即返回停止进一步探索这个路径，因为它不可能形成有效的组合。
检查组合长度：
如果 path（当前组合）的长度等于 k：
检查 currentSum 是否等于 targetSum。
如果相等，将 path 的副本添加到 result。
返回以进行回溯（停止进一步探索这个分支）。
生成候选数字：
循环从 startIndex 到 9 - (k - len(path)) + 2。这个范围确保剩余的数字足够形成长度为 k 的组合。
将 i 添加到 currentSum 和 path。
用更新的参数递归调用 backtracking：
将 currentSum 增加 i。
将 startIndex 增加 1 以避免重复使用相同的数字。
回溯，通过从 currentSum 减去 i 并从 path 移除 i。






from typing import List

class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        result = []  # 存放结果集
        self.backtrack(n, k, 1, [], result)  # 初始化回溯
        return result  # 返回结果集

    def backtrack(self, targetSum: int, k: int, start: int, path: List[int], result: List[List[int]]):
        if len(path) == k:
            if sum(path) == targetSum:  # 检查当前组合的和是否等于目标和
                result.append(path[:])  # 将当前组合的副本添加到结果列表
            return  # 返回以进行回溯
        
        for i in range(start, 10):
            if sum(path) + i > targetSum:  # 剪枝操作，如果当前和加上i大于目标和，停止进一步搜索
                break
            path.append(i)  # 将当前数字添加到组合中
            self.backtrack(targetSum, k, i + 1, path, result)  # 递归调用回溯函数
            path.pop()  # 回溯，移除当前数字



