有效 IP 地址 正好由四个整数（每个整数位于 0 到 255 之间组成，且不能含有前导 0），整数之间用 '.' 分隔。

例如："0.1.2.201" 和 "192.168.1.1" 是 有效 IP 地址，但是 "0.011.255.245"、"192.168.1.312" 和 "192.168@1.1" 是 无效 IP 地址。
给定一个只包含数字的字符串 s ，用以表示一个 IP 地址，返回所有可能的有效 IP 地址，这些地址可以通过在 s 中插入 '.' 来形成。你 不能 重新排序或删除 s 中的任何数字。你可以按 任何 顺序返回答案。

 

示例 1：

输入：s = "25525511135"
输出：["255.255.11.135","255.255.111.35"]
示例 2：

输入：s = "0000"
输出：["0.0.0.0"]
示例 3：

输入：s = "101023"
输出：["1.0.10.23","1.0.102.3","10.1.0.23","10.10.2.3","101.0.2.3"]
 

提示：

1 <= s.length <= 20
s 仅由数字组成

******************************************************************************************************************************************************************************



from typing import List

class Solution:
    def subsets(self, nums: List[int]) -> List[List[int]]:
        result = []  # 存储所有子集的结果列表
        path = []    # 当前子集
        self.backtracking(nums, 0, path, result)
        return result

    def backtracking(self, nums: List[int], startIndex: int, path: List[int], result: List[List[int]]) -> None:
        # 每次进入递归函数都将当前的子集添加到结果列表中
        result.append(path[:])
        
        # 从当前索引开始，遍历数组中的每个元素
        for i in range(startIndex, len(nums)):
            # 将当前元素添加到子集中
            path.append(nums[i])
            # 递归调用，生成从当前元素之后的子集
            self.backtracking(nums, i + 1, path, result)
            # 回溯，移除当前元素，继续尝试下一个元素
            path.pop()









