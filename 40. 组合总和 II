给定一个候选人编号的集合 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。

candidates 中的每个数字在每个组合中只能使用 一次 。

注意：解集不能包含重复的组合。 

 

示例 1:

输入: candidates = [10,1,2,7,6,1,5], target = 8,
输出:
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
示例 2:

输入: candidates = [2,5,2,1,2], target = 5,
输出:
[
[1,2,2],
[5]
]
 

提示:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30




************************************************************************************************************************************************************


Answer：


class Solution:
    def backtracking(self, candidates, target, current_sum, start_index, path, result):
        # 基准情况：如果当前总和等于目标值，将当前路径添加到结果中
        if current_sum == target:
            result.append(path[:])
            return
        
        # 遍历候选数组，从start_index开始
        for i in range(start_index, len(candidates)):
            # 跳过重复的元素，避免生成重复的组合
            if i > start_index and candidates[i] == candidates[i - 1]:
                continue
            
            # 如果当前元素加上当前总和超过目标值，停止循环
            # 因为数组是排序的，后续的元素只会更大
            if current_sum + candidates[i] > target:
                break
            
            # 选择当前元素，将其添加到路径中
            path.append(candidates[i])
            # 递归调用，继续选择下一个元素，更新current_sum和start_index
            self.backtracking(candidates, target, current_sum + candidates[i], i + 1, path, result)
            # 回溯，移除最后一个元素，尝试其他可能的组合
            path.pop()
    
    def combinationSum2(self, candidates, target):
        # 结果列表，用于存储所有符合条件的组合
        result = []
        # 对候选数组进行排序，以便跳过重复元素和进行剪枝操作
        candidates.sort()
        # 调用回溯函数，从第0个元素开始
        self.backtracking(candidates, target, 0, 0, [], result)
        # 返回所有符合条件的组合
        return result













